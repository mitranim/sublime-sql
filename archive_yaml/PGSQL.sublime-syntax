%YAML 1.2
---
version: 2
file_extensions: [pgsql, sql]
extends: Packages/sublime-sql/PGSQL Common.sublime-syntax
scope: source.pgsql
hidden: true

contexts:
  match-ident:
    - meta_prepend: true
    - include: match-ident-keyword

  match-ident-keyword:
    - include: match-keyword-reserved

  match-keyword-reserved:
    # These are technically reserved keywords, but traditionally we prefer to
    # scope them as constants.
    #
    # Note: we don't scope `null` as a constant because in order to do that
    # correctly, we must first capture all the other expressions where `null`
    # is a keyword. Seems unreliable. Also, not confident that scoping `null`
    # as a constant is semantically meaningful in SQL.
    - match: (?i)\b(?:true|false)\b
      scope: constant.language.pgsql
    - match: (?i)\bcreate\b
      scope: keyword.declaration.pgsql
      push: pop-create
    - match: (?i)\b(is)\b(?:\s+\b(not)\b)?\s+\b(true|false|null|unknown)\b
      captures:
        1: keyword.pgsql
        2: keyword.pgsql
        3: keyword.pgsql
    - match: (?i)\b(is)\b(?:\s+\b(not)\b)?\s+\b(distinct)\b\s+\b(from)\b
      captures:
        1: keyword.pgsql
        2: keyword.pgsql
        3: keyword.pgsql
        4: keyword.pgsql
    # Problem: generates false positives. Must be made more contextual.
    - match: (?i)\bconstraint\b
      scope: keyword.declaration.pgsql
      push: pop-constraint-name-and-body
    - match: (?i)\b(order)\b\s+\b(by)\b
      captures:
        1: keyword.reserved.pgsql
        2: keyword.pgsql
    - match: '{{keyword_reserved}}'
      scope: keyword.reserved.pgsql

  pop-create:
    - include: pop-at-semi
    - match: (?i)\bextension\b
      scope: keyword.pgsql
      set: pop-create-extension
    - match: (?i)\bschema\b
      scope: keyword.pgsql
      set: pop-create-schema
    - match: (?i)\btype\b
      scope: keyword.pgsql
      set: pop-create-type
    - match: (?i)\bdomain\b
      scope: keyword.pgsql
      set: pop-create-domain
    - match: (?i)\bfunction\b
      scope: keyword.pgsql
      set: pop-create-function
    - match: (?i)\btable\b
      scope: keyword.pgsql
      set: pop-create-table
    - match: (?i)(?:\b(unique)\b\s+)?\b(index)\b
      captures:
        1: keyword.pgsql
        2: keyword.pgsql
      scope: keyword.pgsql
      set: pop-create-index
    - match: (?i)\btrigger\b
      scope: keyword.pgsql
      set: pop-create-trigger
    - match: (?i)(?:\b(materialized)\b\s+)?\b(view)\b
      captures:
        1: keyword.pgsql
        2: keyword.pgsql
      scope: keyword.pgsql
      set: pop-create-view
    - include: main

  pop-create-extension:
    - include: pop-at-semi
    - include: match-if-not-exists
    - include: pop-before-reserved-keyword
    - include: match-prefix-namespace
    - match: '{{ident_any}}'
      scope: entity.name.extension.pgsql
      pop: true
    - include: main

  pop-create-schema:
    - include: pop-at-semi
    - include: match-if-not-exists
    - include: pop-before-reserved-keyword
    - include: match-prefix-namespace
    - match: '{{ident_any}}'
      scope: entity.name.schema.pgsql
      pop: true
    - include: main

  pop-create-type:
    - include: pop-at-semi
    - include: match-if-not-exists
    - include: pop-before-reserved-keyword
    - include: match-prefix-namespace
    - match: '{{ident_any}}'
      scope: entity.name.type.pgsql
      set: pop-type-definition
    - include: main

  pop-type-definition:
    - include: pop-at-semi
    - include: match-as
    - match: (?i)\b(?:enum)\b
      scope: keyword.declaration.enum.pgsql
    - include: pop-type
    - include: main

  pop-create-domain:
    - include: pop-at-semi
    - include: match-if-not-exists
    - include: pop-before-reserved-keyword
    - include: match-prefix-namespace
    - match: '{{ident_any}}'
      scope: entity.name.type.pgsql
      set: pop-domain-definition
    - include: main

  pop-domain-definition:
    - include: pop-at-semi
    - include: match-as
    - include: pop-type
    - include: main

  pop-create-function:
    - include: pop-at-semi
    - include: match-if-not-exists
    - include: pop-before-reserved-keyword
    - include: match-prefix-namespace
    - match: '{{ident_any}}'
      scope: entity.name.function.pgsql
      set: pop-function-head
    - include: main

  pop-function-head:
    - include: pop-at-semi
    - match: \(
      scope: punctuation.section.parens.begin.pgsql
      set: pop-function-params-and-rest
    - include: main

  # Incomplete. TODO support:
  #   * Type namespaces (schema names followed by a).
  #   * Signatures without parameter names.
  #   * Additional keywords like `inout`.
  #   * More complex type constructs (see `pop-type`).
  pop-function-params-and-rest:
    - include: pop-at-semi
    - match: \)
      scope: punctuation.section.parens.end.pgsql
      set: pop-function-meta-and-rest
    - include: match-keyword-reserved
    - match: '({{ident_any}})\s*({{ident_any}})'
      captures:
        1: variable.parameter.pgsql
        2: storage.type.pgsql
    - include: match-type
    - include: main

  pop-function-meta-and-rest:
    - include: pop-at-semi
    - match: (?i)\breturns\b
      scope: keyword.pgsql
      set: pop-function-return
    - match: (?i)\blanguage\b
      scope: keyword.pgsql
    - include: main

  pop-function-return:
    - include: pop-at-semi
    - match: (?i)\btrigger|table\b
      scope: keyword.pgsql
      set: pop-function-meta-and-rest
    # TODO: support other type constructs.
    - match: '{{ident_any}}'
      scope: storage.type
      set: pop-function-meta-and-rest

  pop-create-table:
    - include: pop-at-semi
    - include: match-if-not-exists
    - include: pop-before-reserved-keyword
    - include: pop-before-paren-end
    - include: match-prefix-namespace
    - match: '{{ident_any}}'
      scope: entity.name.type.table.pgsql
      set: pop-table-definition
    - include: main

  pop-table-definition:
    - include: pop-at-semi
    - include: pop-before-as
    - match: \(
      scope: punctuation.section.parens.begin.pgsql
      set: pop-table-inside-parens
    - include: main

  pop-table-inside-parens:
    - include: pop-at-paren-end
    - match: (?i)\bconstraint\b
      scope: keyword.declaration.pgsql
      push: pop-constraint-name-and-body
    - include: match-keyword-reserved
    - match: '{{ident_any}}'
      scope: variable.other.member.declaration.pgsql
      push: pop-column-type
    - include: main

  pop-constraint-name-and-body:
    - include: pop-before-reserved-keyword
    - include: match-prefix-namespace
    - match: '{{ident_any}}'
      scope: entity.name.constraint.pgsql
      set: pop-constraint-body
    - include: pop-before-nonblank

  pop-constraint-body:
    - include: pop-at-comma-and-before-paren
    - include: pop-before-table-keywords
    - match: (?i)\b(?:exclude|gist)\b
      scope: keyword.pgsql
    - include: main

  pop-column-type:
    - include: pop-at-comma-and-before-paren
    - include: pop-before-reserved-keyword
    - include: match-prefix-namespace
    # TODO: support other type constructs.
    - match: '{{ident_any}}'
      scope: storage.type.pgsql
      set: pop-column-meta
    - include: pop-before-nonblank

  pop-column-meta:
    - include: pop-at-comma-and-before-paren
    - include: pop-before-table-keywords
    - include: match-keyword-reserved
    - match: (?i)\b(key|generated|always|stored)\b
      scope: keyword.pgsql
    - include: main

  pop-create-index:
    - include: pop-at-semi
    - include: match-if-not-exists
    - include: pop-before-reserved-keyword
    - include: match-prefix-namespace
    - match: '{{ident_any}}'
      scope: entity.name.index.pgsql
      set: pop-index-definition
    - include: main

  # Placeholder.
  pop-index-definition:
    - include: pop-at-semi
    - include: main

  pop-create-trigger:
    - include: pop-at-semi
    - include: match-if-not-exists
    - include: pop-before-reserved-keyword
    - include: match-prefix-namespace
    - match: '{{ident_any}}'
      scope: entity.name.trigger.pgsql
      set: pop-trigger-definition
    - include: main

  # Placeholder.
  pop-trigger-definition:
    - include: pop-at-semi
    - include: main

  pop-create-view:
    - include: pop-at-semi
    - include: match-if-not-exists
    - include: pop-before-reserved-keyword
    - include: match-prefix-namespace
    - match: '{{ident_any}}'
      scope: entity.name.type.view.pgsql
      set: pop-view-definition
    - include: main

  # Placeholder.
  pop-view-definition:
    - include: pop-at-semi
    - include: match-as
    - include: main

  # TODO: support multi-token constructs.
  match-type:
    - include: pop-before-reserved-keyword
    - include: match-prefix-namespace
    - match: '{{ident_any}}'
      scope: storage.type.pgsql

  match-if-not-exists:
    - match: (?i)\b(?:if|not|exists)\b
      scope: keyword.pgsql

  pop-at-comma-and-before-paren:
    - include: pop-at-comma
    - include: pop-before-paren-end

  pop-before-table-keywords:
    - match: (?=(?i)\bconstraint\b)
      pop: true
